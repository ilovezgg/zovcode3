import { useState, useEffect } from 'react';
import { auth, db } from '../../../lib/firebase';
import { doc, getDoc, setDoc } from 'firebase/firestore';
import { onAuthStateChanged } from 'firebase/auth';
import styles from './ProfilePicture.module.css';

const ProfilePicture = () => {
  const [avatarUrl, setAvatarUrl] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');
  const [user, setUser] = useState(null);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–µ–π –∞–≤–∞—Ç–∞—Ä–∫–∏ –∏–∑ Firestore
  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, async (currentUser) => {
      if (currentUser) {
        setUser(currentUser);
        try {
          const userDoc = await getDoc(doc(db, 'users', currentUser.uid));
          if (userDoc.exists()) {
            const userData = userDoc.data();
            setAvatarUrl(userData?.avatarUrl || '');
          }
        } catch (err) {
          setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏');
        }
      }
    });
    return () => unsubscribe();
  }, []);

  // –°–∂–∞—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
  const compressImage = (file, maxWidth = 300, quality = 0.7) => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = (e) => {
        const img = new Image();
        img.onload = () => {
          const canvas = document.createElement('canvas');
          const ctx = canvas.getContext('2d');

          let { width, height } = img;
          if (width > maxWidth) {
            height = (height * maxWidth) / width;
            width = maxWidth;
          }

          canvas.width = width;
          canvas.height = height;
          ctx.drawImage(img, 0, 0, width, height);

          canvas.toBlob(
            (blob) => {
              if (!blob) return reject(new Error('Canvas toBlob failed'));
              const compressedFile = new File([blob], file.name, { type: 'image/jpeg' });
              const reader2 = new FileReader();
              reader2.onloadend = () => resolve(reader2.result);
              reader2.readAsDataURL(compressedFile);
            },
            'image/jpeg',
            quality
          );
        };
        img.onerror = reject;
        img.src = e.target.result;
      };
      reader.onerror = reject;
      reader.readAsDataURL(file);
    });
  };

  const handleFileUpload = async (file) => {
    if (!file) return;

    if (!file.type.startsWith('image/')) {
      setError('–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
      return;
    }

    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –Ω–µ –±–æ–ª–µ–µ 5 –ú–ë –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (Base64 –±—É–¥–µ—Ç ~1.3x –±–æ–ª—å—à–µ)
    if (file.size > 5 * 1024 * 1024) {
      setError('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å. 5 –ú–ë)');
      return;
    }

    setIsLoading(true);
    setError('');

    try {
      // –°–∂–∏–º–∞–µ–º –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Base64
      const base64String = await compressImage(file);

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã (Firestore –ª–∏–º–∏—Ç ~1 –ú–ë –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç)
      if (base64String.length > 900_000) {
        setError('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –ø–æ—Å–ª–µ —Å–∂–∞—Ç–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω—å—à–µ.');
        return;
      }

      setAvatarUrl(base64String);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firestore
      if (user) {
        await setDoc(doc(db, 'users', user.uid), {
          avatarUrl: base64String,
          updatedAt: new Date().toISOString()
        }, { merge: true });
      }

      alert('–ê–≤–∞—Ç–∞—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
    } catch (err) {
      console.error('Upload error:', err);
      setError(`–û—à–∏–±–∫–∞: ${err.message}`);
    } finally {
      setIsLoading(false);
    }
  };

  const handleFileSelect = (event) => {
    const file = event.target.files[0];
    if (file) {
      handleFileUpload(file);
    }
    event.target.value = '';
  };

  const handleRemove = async () => {
    if (!user) return;

    try {
      setIsLoading(true);
      await setDoc(doc(db, 'users', user.uid), {
        avatarUrl: '',
        updatedAt: new Date().toISOString()
      }, { merge: true });

      setAvatarUrl('');
      alert('–ê–≤–∞—Ç–∞—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∞!');
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ' + err.message);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className={styles.container}>
      <h3 className={styles.title}>–í–∞—à–∞ –∞–≤–∞—Ç–∞—Ä–∫–∞</h3>

      {error && <div className={styles.error}>{error}</div>}

      <div className={styles.avatarPreview}>
        {avatarUrl ? (
          <img src={avatarUrl} alt="–ê–≤–∞—Ç–∞—Ä" className={styles.avatarImage} />
        ) : (
          <div className={styles.avatarPlaceholder}>üë§</div>
        )}
      </div>

      <div className={styles.controls}>
        <input
          type="file"
          id="avatar-upload"
          accept="image/*"
          onChange={handleFileSelect}
          className={styles.fileInput}
          disabled={isLoading}
        />
        <label htmlFor="avatar-upload" className={styles.uploadButton}>
          {isLoading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–í—ã–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ (–¥–æ 5 –ú–ë)'}
        </label>

        {avatarUrl && (
          <button
            className={styles.removeButton}
            onClick={handleRemove}
            disabled={isLoading}
          >
            –£–¥–∞–ª–∏—Ç—å
          </button>
        )}
      </div>
    </div>
  );
};

export default ProfilePicture;